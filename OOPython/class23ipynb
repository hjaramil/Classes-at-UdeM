{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNGOwLSO3DU8w5qRkVNBIvt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Abstraccion (Abstraction)\n","Astraccion es un concepto muy general. En OO consiste inialmente en de observaciones detectar las propiedades (atributos) y comportamientos y formar una clase. Esto es \"encapsulation\". Sin embargo, normalmente en OO se usa el termino \"abstracto\" para definir metodos que se ocultan por su  compleijdad y se defininen en clases externas (derivadas).\n","\n","Ejemplo: clase abstracta. Estas clases se comportan como interfaces. Estas interfaces no son necesariamente puras, pues guandar datos como mostramos en el ejemplo siguiente."],"metadata":{"id":"Fq6ImWWKlir1"}},{"cell_type":"code","source":["# importamos herramientas para metodos abstractos\\\n","from abc import ABC, abstractmethod"],"metadata":{"id":"_mZdu3wOmE5j","executionInfo":{"status":"ok","timestamp":1665500980634,"user_tz":300,"elapsed":5,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from ast import Return\n","# esta la clase abstracta con metodos ocultos\n","from numpy import pi\n","class Solid(ABC):\n","    scale=5\n","\n","    @abstractmethod\n","    def surfaceArea(self):\n","        pass\n","\n","    @abstractmethod\n","    def volume(self):\n","        pass\n","\n","# la clase cylinder hereda de solido\n","class Cylinder(Solid):\n","\n","    def __init__(self, radius, height):\n","        self.radius = radius\n","        self.height = height\n","        return\n","\n","    def surfaceArea(self):\n","        return 2*pi*self.radius**2 + 2*pi*self.radius*self.height\n","\n","    def volume(self):\n","        return pi*self.radius**2* self.height\n","\n","    def volumneScaled(self):\n","        return self.scale*self.volume() \n","\n","class Sphere(Solid):\n","    \n","    def __init__(self, radius):\n","        self.radius = radius\n","        return\n","\n","    def surfaceArea(self):\n","        return 4*pi*self.radius**2\n","\n","    def volume(self):\n","        return (4/3)*pi*self.radius**3\n","\n","    def volumeScaled(self):\n","        return self.scale*self.volume()\n","\n","class Cone(Solid):\n","\n","    def __init__(self, radius, height):\n","        self.radius = radius\n","        self.height = height\n","        return\n","\n","    def volume(self):\n","        return pi*self.radius**2*self.height/3.\n","        \n","\n","    \n","        \n","\n","    "],"metadata":{"id":"twpPz-w_mAjL","executionInfo":{"status":"ok","timestamp":1665502557723,"user_tz":300,"elapsed":196,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["mySolid = Solid()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"bHqYosh3pl9O","executionInfo":{"status":"error","timestamp":1665502558136,"user_tz":300,"elapsed":7,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"b37185b7-b8f1-47b5-8e49-7d245123ec2c"},"execution_count":19,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-0aaa9dd14216>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmySolid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSolid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Can't instantiate abstract class Solid with abstract methods surfaceArea, volume"]}]},{"cell_type":"code","source":["myCylinder = Cylinder(3,2)\n","myCylinder.__dict__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OrOGp_YSqhsm","executionInfo":{"status":"ok","timestamp":1665502558695,"user_tz":300,"elapsed":7,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"10f2a88d-c9e5-4b9f-878f-863ab4e68cdf"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'radius': 3, 'height': 2}"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["print( myCylinder.surfaceArea())\n","print( myCylinder.volume())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jI_O7lATqvyp","executionInfo":{"status":"ok","timestamp":1665502559282,"user_tz":300,"elapsed":9,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"f722ec43-0669-4a1b-a833-ffd114f19b04"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["94.24777960769379\n","56.548667764616276\n"]}]},{"cell_type":"code","source":["mySphere = Sphere(3)\n","mySphere.__dict__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eTDd_QScq9YG","executionInfo":{"status":"ok","timestamp":1665502559935,"user_tz":300,"elapsed":4,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"c59c6426-45d0-447e-b285-638a01562afb"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'radius': 3}"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["mySphere.volume()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DqmxOMlTrEk-","executionInfo":{"status":"ok","timestamp":1665502560516,"user_tz":300,"elapsed":8,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"2eedf09b-7d98-4042-aff3-e5f354b24f28"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["113.09733552923254"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["mySphere.surfaceArea()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rzWiTpnVrh0r","executionInfo":{"status":"ok","timestamp":1665502561571,"user_tz":300,"elapsed":6,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"6eb5bfae-743b-4ae3-c1c5-14374d82f031"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["113.09733552923255"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["mySphere.volumeScaled()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dPvsCIS6rqbx","executionInfo":{"status":"ok","timestamp":1665502562093,"user_tz":300,"elapsed":5,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"160fe48b-5d9e-4558-9bf1-eedd0ecc7968"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["565.4866776461627"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["## Comentarios y documentacion.\n","\n","Hay muchos tipos de comentarios\n","\n","*   \\#   Marca linea de comentarios\n","*  ''  (comillas simples, comentarios que van a la documentacion)\n","* \"\" (comillas dobles, comentarios que van a la documentacion)\n","* ```  '''  '''  ``` Son comentarios multilinea, y van la documentacion"],"metadata":{"id":"907iESJer-cI"}},{"cell_type":"code","source":["# este comentario no entra en la documentacion\n","class Car:\n","    ''' Esta clase describe atributos y comportamientos de \n","    un carro. Este comentario (multilinea) va a la \n","    documentacion '''\n","\n","    def __init__(self, brand=\"Nissan\", model=\"Sentra\", year=2005, engineTemperature=100):\n","        '''  La inicializacion provee los parametros en todos sus argumentos \n","        como se muestra arriba '''\n","\n","        self.brand = brand\n","        self.model = model\n","        self.year = year\n","        self.__engineTemperature = engineTemperature\n","        return\n","\n","\n","    def temperaturePlusOne(self):\n","        \" La temperatura se incrementa en uno \"\n","        return self.__engineTemperature + 1\n","\n","    def getTemp(self):\n","        ' este metodo retorna el valor de la temperatura'\n","        return self.__engineTemperature\n","\n","    def setTemp(self, newTemp):\n","        \" este metodo asigna una nueva temperatura\"\n","        self.__engineTemperature = newTemp\n","        return\n","\n","test = Car()\n","print(\"temperature + 1 = \", test.temperaturePlusOne())\n","print(\"brand\", test.brand)\n","print(\"model\", test.model)\n","print(\"year\", test.year)\n","\n","# temperatura antes. Este comentario no va a la documentacion\n","print(\"Temperatura antes del cambio\", test.getTemp())\n","\n","# temperatura despues de cambio. Este comentario no va a a documentacion\n","test.setTemp(110)\n","\n","# imprime tempetura con el getter . Este comentario no va a la documentacion\n","print(\"temperatura luego del cambio\", test.getTemp())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ISZAuJejs0_6","executionInfo":{"status":"ok","timestamp":1665503349515,"user_tz":300,"elapsed":150,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"84c7cfe5-8b09-4451-f109-96e226a8c448"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["temperature + 1 =  101\n","brand Nissan\n","model Sentra\n","year 2005\n","Temperatura antes del cambio 100\n","temperatura luego del cambio 110\n"]}]},{"cell_type":"code","source":["help(Car)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TorHEfIku9W_","executionInfo":{"status":"ok","timestamp":1665503362418,"user_tz":300,"elapsed":155,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"2ba158b1-92c3-44a2-ae5b-b3421ee52f52"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on class Car in module __main__:\n","\n","class Car(builtins.object)\n"," |  Car(brand='Nissan', model='Sentra', year=2005, engineTemperature=100)\n"," |  \n"," |  Esta clase describe atributos y comportamientos de \n"," |  un carro. Este comentario (multilinea) va a la \n"," |  documentacion\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, brand='Nissan', model='Sentra', year=2005, engineTemperature=100)\n"," |      La inicializacion provee los parametros en todos sus argumentos \n"," |      como se muestra arriba\n"," |  \n"," |  getTemp(self)\n"," |      este metodo retorna el valor de la temperatura\n"," |  \n"," |  setTemp(self, newTemp)\n"," |      este metodo asigna una nueva temperatura\n"," |  \n"," |  temperaturePlusOne(self)\n"," |      La temperatura se incrementa en uno\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors defined here:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n","\n"]}]},{"cell_type":"code","source":["# un ejemplo con un entero\n","a=5\n","help(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f9OTLZWAvHtj","executionInfo":{"status":"ok","timestamp":1665503450948,"user_tz":300,"elapsed":147,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"50b017f6-2c7a-45c4-a3b2-ad85a3251f52"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on int object:\n","\n","class int(object)\n"," |  int([x]) -> integer\n"," |  int(x, base=10) -> integer\n"," |  \n"," |  Convert a number or string to an integer, or return 0 if no arguments\n"," |  are given.  If x is a number, return x.__int__().  For floating point\n"," |  numbers, this truncates towards zero.\n"," |  \n"," |  If x is not a number or if base is given, then x must be a string,\n"," |  bytes, or bytearray instance representing an integer literal in the\n"," |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n"," |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n"," |  Base 0 means to interpret the base from the string as an integer literal.\n"," |  >>> int('0b100', base=0)\n"," |  4\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __abs__(self, /)\n"," |      abs(self)\n"," |  \n"," |  __add__(self, value, /)\n"," |      Return self+value.\n"," |  \n"," |  __and__(self, value, /)\n"," |      Return self&value.\n"," |  \n"," |  __bool__(self, /)\n"," |      self != 0\n"," |  \n"," |  __ceil__(...)\n"," |      Ceiling of an Integral returns itself.\n"," |  \n"," |  __divmod__(self, value, /)\n"," |      Return divmod(self, value).\n"," |  \n"," |  __eq__(self, value, /)\n"," |      Return self==value.\n"," |  \n"," |  __float__(self, /)\n"," |      float(self)\n"," |  \n"," |  __floor__(...)\n"," |      Flooring an Integral returns itself.\n"," |  \n"," |  __floordiv__(self, value, /)\n"," |      Return self//value.\n"," |  \n"," |  __format__(self, format_spec, /)\n"," |      Default object formatter.\n"," |  \n"," |  __ge__(self, value, /)\n"," |      Return self>=value.\n"," |  \n"," |  __getattribute__(self, name, /)\n"," |      Return getattr(self, name).\n"," |  \n"," |  __getnewargs__(self, /)\n"," |  \n"," |  __gt__(self, value, /)\n"," |      Return self>value.\n"," |  \n"," |  __hash__(self, /)\n"," |      Return hash(self).\n"," |  \n"," |  __index__(self, /)\n"," |      Return self converted to an integer, if self is suitable for use as an index into a list.\n"," |  \n"," |  __int__(self, /)\n"," |      int(self)\n"," |  \n"," |  __invert__(self, /)\n"," |      ~self\n"," |  \n"," |  __le__(self, value, /)\n"," |      Return self<=value.\n"," |  \n"," |  __lshift__(self, value, /)\n"," |      Return self<<value.\n"," |  \n"," |  __lt__(self, value, /)\n"," |      Return self<value.\n"," |  \n"," |  __mod__(self, value, /)\n"," |      Return self%value.\n"," |  \n"," |  __mul__(self, value, /)\n"," |      Return self*value.\n"," |  \n"," |  __ne__(self, value, /)\n"," |      Return self!=value.\n"," |  \n"," |  __neg__(self, /)\n"," |      -self\n"," |  \n"," |  __or__(self, value, /)\n"," |      Return self|value.\n"," |  \n"," |  __pos__(self, /)\n"," |      +self\n"," |  \n"," |  __pow__(self, value, mod=None, /)\n"," |      Return pow(self, value, mod).\n"," |  \n"," |  __radd__(self, value, /)\n"," |      Return value+self.\n"," |  \n"," |  __rand__(self, value, /)\n"," |      Return value&self.\n"," |  \n"," |  __rdivmod__(self, value, /)\n"," |      Return divmod(value, self).\n"," |  \n"," |  __repr__(self, /)\n"," |      Return repr(self).\n"," |  \n"," |  __rfloordiv__(self, value, /)\n"," |      Return value//self.\n"," |  \n"," |  __rlshift__(self, value, /)\n"," |      Return value<<self.\n"," |  \n"," |  __rmod__(self, value, /)\n"," |      Return value%self.\n"," |  \n"," |  __rmul__(self, value, /)\n"," |      Return value*self.\n"," |  \n"," |  __ror__(self, value, /)\n"," |      Return value|self.\n"," |  \n"," |  __round__(...)\n"," |      Rounding an Integral returns itself.\n"," |      Rounding with an ndigits argument also returns an integer.\n"," |  \n"," |  __rpow__(self, value, mod=None, /)\n"," |      Return pow(value, self, mod).\n"," |  \n"," |  __rrshift__(self, value, /)\n"," |      Return value>>self.\n"," |  \n"," |  __rshift__(self, value, /)\n"," |      Return self>>value.\n"," |  \n"," |  __rsub__(self, value, /)\n"," |      Return value-self.\n"," |  \n"," |  __rtruediv__(self, value, /)\n"," |      Return value/self.\n"," |  \n"," |  __rxor__(self, value, /)\n"," |      Return value^self.\n"," |  \n"," |  __sizeof__(self, /)\n"," |      Returns size in memory, in bytes.\n"," |  \n"," |  __str__(self, /)\n"," |      Return str(self).\n"," |  \n"," |  __sub__(self, value, /)\n"," |      Return self-value.\n"," |  \n"," |  __truediv__(self, value, /)\n"," |      Return self/value.\n"," |  \n"," |  __trunc__(...)\n"," |      Truncating an Integral returns itself.\n"," |  \n"," |  __xor__(self, value, /)\n"," |      Return self^value.\n"," |  \n"," |  bit_length(self, /)\n"," |      Number of bits necessary to represent self in binary.\n"," |      \n"," |      >>> bin(37)\n"," |      '0b100101'\n"," |      >>> (37).bit_length()\n"," |      6\n"," |  \n"," |  conjugate(...)\n"," |      Returns self, the complex conjugate of any int.\n"," |  \n"," |  to_bytes(self, /, length, byteorder, *, signed=False)\n"," |      Return an array of bytes representing an integer.\n"," |      \n"," |      length\n"," |        Length of bytes object to use.  An OverflowError is raised if the\n"," |        integer is not representable with the given number of bytes.\n"," |      byteorder\n"," |        The byte order used to represent the integer.  If byteorder is 'big',\n"," |        the most significant byte is at the beginning of the byte array.  If\n"," |        byteorder is 'little', the most significant byte is at the end of the\n"," |        byte array.  To request the native byte order of the host system, use\n"," |        `sys.byteorder' as the byte order value.\n"," |      signed\n"," |        Determines whether two's complement is used to represent the integer.\n"," |        If signed is False and a negative integer is given, an OverflowError\n"," |        is raised.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods defined here:\n"," |  \n"," |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type\n"," |      Return the integer represented by the given array of bytes.\n"," |      \n"," |      bytes\n"," |        Holds the array of bytes to convert.  The argument must either\n"," |        support the buffer protocol or be an iterable object producing bytes.\n"," |        Bytes and bytearray are examples of built-in objects that support the\n"," |        buffer protocol.\n"," |      byteorder\n"," |        The byte order used to represent the integer.  If byteorder is 'big',\n"," |        the most significant byte is at the beginning of the byte array.  If\n"," |        byteorder is 'little', the most significant byte is at the end of the\n"," |        byte array.  To request the native byte order of the host system, use\n"," |        `sys.byteorder' as the byte order value.\n"," |      signed\n"," |        Indicates whether two's complement is used to represent the integer.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Static methods defined here:\n"," |  \n"," |  __new__(*args, **kwargs) from builtins.type\n"," |      Create and return a new object.  See help(type) for accurate signature.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors defined here:\n"," |  \n"," |  denominator\n"," |      the denominator of a rational number in lowest terms\n"," |  \n"," |  imag\n"," |      the imaginary part of a complex number\n"," |  \n"," |  numerator\n"," |      the numerator of a rational number in lowest terms\n"," |  \n"," |  real\n"," |      the real part of a complex number\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"pSmMUVPavdPQ"},"execution_count":null,"outputs":[]}]}