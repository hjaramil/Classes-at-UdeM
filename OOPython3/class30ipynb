{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM8/bxKrEYJyHJZK3dFwrok"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# [Itertools](https://docs.python.org/3/library/itertools.html)\n","\n","Lista de herramientas utiles (no todas)\n","\n","* count()\n","* ziplongest()\n","* cycle()\n","* repeat()\n","* startmap()\n","* combinations()\n","* permutations()\n","* products()\n","* combinations with replacement()\n","* chain()\n","* islice()\n","* compress()  # filtro con T (True)\n","* filterfalse() # filtro con F (False)\n","* dropwhile()\n","* takewhile()\n","* accumultate()\n","\n","\n","\n","\n"],"metadata":{"id":"UBzZ8RB4d46I"}},{"cell_type":"markdown","source":["##  counter()\n","Sintaxis\n","```itertools.count(start, step)```\n"],"metadata":{"id":"Jj-4LQ4Ud9aW"}},{"cell_type":"code","source":["# ponemos un limite n=4\n","import itertools\n","counter = itertools.count()\n","\n","n=4\n","for _ in range(n):\n","    print(next(counter))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dyzaHczXaaEq","executionInfo":{"status":"ok","timestamp":1684422727581,"user_tz":300,"elapsed":3,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"5077dc96-ea14-4ba9-bdb4-0f0f7163225a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n"]}]},{"cell_type":"code","source":["next(counter)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHjFf4qRavwr","executionInfo":{"status":"ok","timestamp":1684422775591,"user_tz":300,"elapsed":3,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"2a46056f-58a7-4229-a731-33ff29fdb63b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["counter = itertools.count(start=10, step=5)\n","\n","n=4\n","for _ in range(n):\n","    print(next(counter))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T4e9-DkNa8N_","executionInfo":{"status":"ok","timestamp":1684422848195,"user_tz":300,"elapsed":197,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"2597eab3-1925-4b31-ba2d-077d75185ef6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","15\n","20\n","25\n"]}]},{"cell_type":"code","source":["L=[10, 20, 30, 40, 50]\n","counter=itertools.count()\n","\n","myLpairs=list(zip(counter, L))\n","print(myLpairs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"byZwx83Qbqwj","executionInfo":{"status":"ok","timestamp":1684423012227,"user_tz":300,"elapsed":197,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"862f7699-ae49-4bf4-c1f9-7030431fd454"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(0, 10), (1, 20), (2, 30), (3, 40), (4, 50)]\n"]}]},{"cell_type":"markdown","source":["## ziplongest"],"metadata":{"id":"Qo5xzwQ2bEcf"}},{"cell_type":"code","source":["n=10\n","newDat = list(itertools.zip_longest(range(n), L))\n","newDat"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J_8BQJz-bp7f","executionInfo":{"status":"ok","timestamp":1684423135879,"user_tz":300,"elapsed":205,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"30bbae4f-ced2-464e-ea9c-71f29ad7b2fb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, 10),\n"," (1, 20),\n"," (2, 30),\n"," (3, 40),\n"," (4, 50),\n"," (5, None),\n"," (6, None),\n"," (7, None),\n"," (8, None),\n"," (9, None)]"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["## cycle"],"metadata":{"id":"vQ5_oYtccU1x"}},{"cell_type":"code","source":["cycler = itertools.cycle([1,2,3])\n","n=100\n","for _ in range(n):\n","    print(next(cycler), end='')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IuCXYezKckE6","executionInfo":{"status":"ok","timestamp":1684423266892,"user_tz":300,"elapsed":220,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"ef359218-caec-4871-c9cc-0e107ab4bf78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"]}]},{"cell_type":"code","source":["cycler = itertools.cycle(['a','b','c'])\n","n=100\n","for _ in range(n):\n","    print(next(cycler), end='')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jSZ91UpYcyTL","executionInfo":{"status":"ok","timestamp":1684423304516,"user_tz":300,"elapsed":174,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"7c1f49b4-aad4-4e5e-82c3-ed1027edd002"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"]}]},{"cell_type":"code","source":["cycler = itertools.cycle([\"on\", \"off\"])\n","n=10\n","for _ in range(n):\n","    print(\"  \", next(cycler), end='')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBXjxQgCc-Jq","executionInfo":{"status":"ok","timestamp":1684423346829,"user_tz":300,"elapsed":262,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"c56ba1f9-088b-4827-9820-3ecd407aea36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   on   off   on   off   on   off   on   off   on   off"]}]},{"cell_type":"markdown","source":["## repeat()\n","Syntaxis: ```repeat(object, times=# times)```"],"metadata":{"id":"6MiKjTfddHG8"}},{"cell_type":"code","source":["a = \"repeat me\"\n","times = n-2\n","repeater = itertools.repeat(a, times=times)\n","\n","for _ in range(n):\n","    print(next(repeater))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"o8ORuFDcdN_y","executionInfo":{"status":"error","timestamp":1684423532874,"user_tz":300,"elapsed":196,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"0dd16948-b008-412d-e035-739815646fa7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"StopIteration","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-d7a43f3392a2>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrepeater\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mStopIteration\u001b[0m: "]}]},{"cell_type":"code","source":["n=10\n","repeater = itertools.repeat(0.5, n)\n","sqroots = map( pow, range(n), repeater)\n","print(list(sqroots))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BsbK1v2sdlT1","executionInfo":{"status":"ok","timestamp":1684423634211,"user_tz":300,"elapsed":375,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"38279be2-84d9-4062-bb19-040492b5c0e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979, 2.449489742783178, 2.6457513110645907, 2.8284271247461903, 3.0]\n"]}]},{"cell_type":"markdown","source":["## startmap\n","Syntaxis: ```starmap(operador, lista)```\n","```operador``` se aplica a la ```lista```\n"],"metadata":{"id":"763XY1uygoH-"}},{"cell_type":"code","source":["lst = [ (1, 3), (3,3), (2,4)]\n","val = itertools.starmap(pow, lst)  #1^3, 3^3 , 2^4\n","print('itertools.starmap(pow, %s) = %s' %(lst, list(val)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NEBKPsw7g1ZY","executionInfo":{"status":"ok","timestamp":1684424446483,"user_tz":300,"elapsed":5,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"8393356b-1f3e-48f7-91ed-028a8b1d1c6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["itertools.starmap(pow, [(1, 3), (3, 3), (2, 4)]) = [1, 27, 16]\n"]}]},{"cell_type":"code","source":["# podemos definir cualquier funcion como \"operador\"\n","\n","def f(x,y):\n","    return x+y\n","\n","ret_val = itertools.starmap(f, lst)\n","print('itertools.starmap(f, %s) = %s' %(lst, list(ret_val)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPaqZksPhbYc","executionInfo":{"status":"ok","timestamp":1684424530748,"user_tz":300,"elapsed":2,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"57a37701-6b7e-42ad-e3b9-3cf38f483462"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["itertools.starmap(f, [(1, 3), (3, 3), (2, 4)]) = [4, 6, 6]\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"DmSriKKEeG28"}},{"cell_type":"markdown","source":["## combinations: \n","syntaxis : ```combinations(set, n)```\n","donde ```set``` es un conjunto de referencia y\n","```n``` es un entero indicanto de a cuantos elementos deseamos\n","extaer del conjunto.\n","\n","Las combinaciones son subconjuntos de un conjunto donde no importa el orden ni hay repeticiones.\n","\n","Se cuentan con el coeficiente binomial\n","\n","$$\\binom{n}{m} = \\frac{n! }{(n-m)! m!}$$\n","\n","Por ejemplo de un conjunto de 4 objetos queremos extraer 3 objetos. De cuantas formas lo podemos hacer.\n","\n","$$\\binom{4}{3} = \\frac{4! }{(1)! 3} = 4$$"],"metadata":{"id":"nbB7MBoKeLsL"}},{"cell_type":"code","source":["import itertools\n","from itertools import combinations\n","\n","digits = [1,2,3, 4]\n","\n","combs = combinations(digits,3)\n","\n","print(list(combs))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8AlvMqvFfjUu","executionInfo":{"status":"ok","timestamp":1684424117666,"user_tz":300,"elapsed":197,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"72435f0d-8829-47ff-88ed-555bbf353dc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n"]}]},{"cell_type":"markdown","source":["# permutaciones\n","Syntaxis: ```permutations(set, n)```\n","Las permutaciones se hacen sobre un conjunto ```set``` tomando de\n","a ```n``` elementos.\n","\n","Matematicamente,  el numero de permutaciones de un conjunto de $n$ elementos con grupos de $m$ elementos esta dado por la formula.\n","\n","\n","$$ (n)_m = \\frac{n!}{(n-m)!}$$\n","\n","En el ejemplo anterior.\n","\n","$$ (4)_3 = \\frac{4!}{(1)!}=24$$\n"],"metadata":{"id":"fqel3TRkgEtW"}},{"cell_type":"code","source":["import itertools\n","from itertools import permutations\n","\n","digits = [1,2,3,4]\n","\n","perms = permutations(digits, 3)\n","listperms = list(perms)\n","print(\"numero de permutatciones\", len(listperms))\n","\n","print(listperms)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mf7Ay2DQitll","executionInfo":{"status":"ok","timestamp":1684424893455,"user_tz":300,"elapsed":4,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"6dfcb2ea-29b2-4c52-85b9-f96f7b17f3e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["numero de permutatciones 24\n","[(1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 2, 1), (4, 2, 3), (4, 3, 1), (4, 3, 2)]\n"]}]},{"cell_type":"markdown","source":["## products\n","syntaxis: ```products(conjunto, repeat=k)```\n","\n","Estos son productos cartesianos. Si $k=1$, el conjunto es el el mismo (no pasa nada) si $k=2$ es un producto cartesiano del conjunto. \n","\n","El conteo $n^k$"],"metadata":{"id":"gQEaF6OvjCC8"}},{"cell_type":"code","source":["import itertools\n","from itertools import product\n","\n","digits=[1,2,3,4]\n","k=4\n","\n","products = product(digits, repeat=k)\n","listprod = list(products) # no tratar esto en su proyecto\n","\n","print(\"numero de productos\", len(listprod))\n","print(listprod)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I_DGPVdKj7gi","executionInfo":{"status":"ok","timestamp":1684425241137,"user_tz":300,"elapsed":193,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"3d511579-85e6-4573-b118-a90720937708"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["numero de productos 256\n","[(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 1, 4), (1, 1, 2, 1), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 2, 4), (1, 1, 3, 1), (1, 1, 3, 2), (1, 1, 3, 3), (1, 1, 3, 4), (1, 1, 4, 1), (1, 1, 4, 2), (1, 1, 4, 3), (1, 1, 4, 4), (1, 2, 1, 1), (1, 2, 1, 2), (1, 2, 1, 3), (1, 2, 1, 4), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 2, 4), (1, 2, 3, 1), (1, 2, 3, 2), (1, 2, 3, 3), (1, 2, 3, 4), (1, 2, 4, 1), (1, 2, 4, 2), (1, 2, 4, 3), (1, 2, 4, 4), (1, 3, 1, 1), (1, 3, 1, 2), (1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3), (1, 3, 2, 4), (1, 3, 3, 1), (1, 3, 3, 2), (1, 3, 3, 3), (1, 3, 3, 4), (1, 3, 4, 1), (1, 3, 4, 2), (1, 3, 4, 3), (1, 3, 4, 4), (1, 4, 1, 1), (1, 4, 1, 2), (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 1), (1, 4, 2, 2), (1, 4, 2, 3), (1, 4, 2, 4), (1, 4, 3, 1), (1, 4, 3, 2), (1, 4, 3, 3), (1, 4, 3, 4), (1, 4, 4, 1), (1, 4, 4, 2), (1, 4, 4, 3), (1, 4, 4, 4), (2, 1, 1, 1), (2, 1, 1, 2), (2, 1, 1, 3), (2, 1, 1, 4), (2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3), (2, 1, 2, 4), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (2, 1, 3, 4), (2, 1, 4, 1), (2, 1, 4, 2), (2, 1, 4, 3), (2, 1, 4, 4), (2, 2, 1, 1), (2, 2, 1, 2), (2, 2, 1, 3), (2, 2, 1, 4), (2, 2, 2, 1), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 2, 4), (2, 2, 3, 1), (2, 2, 3, 2), (2, 2, 3, 3), (2, 2, 3, 4), (2, 2, 4, 1), (2, 2, 4, 2), (2, 2, 4, 3), (2, 2, 4, 4), (2, 3, 1, 1), (2, 3, 1, 2), (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 1), (2, 3, 2, 2), (2, 3, 2, 3), (2, 3, 2, 4), (2, 3, 3, 1), (2, 3, 3, 2), (2, 3, 3, 3), (2, 3, 3, 4), (2, 3, 4, 1), (2, 3, 4, 2), (2, 3, 4, 3), (2, 3, 4, 4), (2, 4, 1, 1), (2, 4, 1, 2), (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 1), (2, 4, 2, 2), (2, 4, 2, 3), (2, 4, 2, 4), (2, 4, 3, 1), (2, 4, 3, 2), (2, 4, 3, 3), (2, 4, 3, 4), (2, 4, 4, 1), (2, 4, 4, 2), (2, 4, 4, 3), (2, 4, 4, 4), (3, 1, 1, 1), (3, 1, 1, 2), (3, 1, 1, 3), (3, 1, 1, 4), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3), (3, 1, 2, 4), (3, 1, 3, 1), (3, 1, 3, 2), (3, 1, 3, 3), (3, 1, 3, 4), (3, 1, 4, 1), (3, 1, 4, 2), (3, 1, 4, 3), (3, 1, 4, 4), (3, 2, 1, 1), (3, 2, 1, 2), (3, 2, 1, 3), (3, 2, 1, 4), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3), (3, 2, 2, 4), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3), (3, 2, 3, 4), (3, 2, 4, 1), (3, 2, 4, 2), (3, 2, 4, 3), (3, 2, 4, 4), (3, 3, 1, 1), (3, 3, 1, 2), (3, 3, 1, 3), (3, 3, 1, 4), (3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3), (3, 3, 2, 4), (3, 3, 3, 1), (3, 3, 3, 2), (3, 3, 3, 3), (3, 3, 3, 4), (3, 3, 4, 1), (3, 3, 4, 2), (3, 3, 4, 3), (3, 3, 4, 4), (3, 4, 1, 1), (3, 4, 1, 2), (3, 4, 1, 3), (3, 4, 1, 4), (3, 4, 2, 1), (3, 4, 2, 2), (3, 4, 2, 3), (3, 4, 2, 4), (3, 4, 3, 1), (3, 4, 3, 2), (3, 4, 3, 3), (3, 4, 3, 4), (3, 4, 4, 1), (3, 4, 4, 2), (3, 4, 4, 3), (3, 4, 4, 4), (4, 1, 1, 1), (4, 1, 1, 2), (4, 1, 1, 3), (4, 1, 1, 4), (4, 1, 2, 1), (4, 1, 2, 2), (4, 1, 2, 3), (4, 1, 2, 4), (4, 1, 3, 1), (4, 1, 3, 2), (4, 1, 3, 3), (4, 1, 3, 4), (4, 1, 4, 1), (4, 1, 4, 2), (4, 1, 4, 3), (4, 1, 4, 4), (4, 2, 1, 1), (4, 2, 1, 2), (4, 2, 1, 3), (4, 2, 1, 4), (4, 2, 2, 1), (4, 2, 2, 2), (4, 2, 2, 3), (4, 2, 2, 4), (4, 2, 3, 1), (4, 2, 3, 2), (4, 2, 3, 3), (4, 2, 3, 4), (4, 2, 4, 1), (4, 2, 4, 2), (4, 2, 4, 3), (4, 2, 4, 4), (4, 3, 1, 1), (4, 3, 1, 2), (4, 3, 1, 3), (4, 3, 1, 4), (4, 3, 2, 1), (4, 3, 2, 2), (4, 3, 2, 3), (4, 3, 2, 4), (4, 3, 3, 1), (4, 3, 3, 2), (4, 3, 3, 3), (4, 3, 3, 4), (4, 3, 4, 1), (4, 3, 4, 2), (4, 3, 4, 3), (4, 3, 4, 4), (4, 4, 1, 1), (4, 4, 1, 2), (4, 4, 1, 3), (4, 4, 1, 4), (4, 4, 2, 1), (4, 4, 2, 2), (4, 4, 2, 3), (4, 4, 2, 4), (4, 4, 3, 1), (4, 4, 3, 2), (4, 4, 3, 3), (4, 4, 3, 4), (4, 4, 4, 1), (4, 4, 4, 2), (4, 4, 4, 3), (4, 4, 4, 4)]\n"]}]},{"cell_type":"markdown","source":["## combinations with replacement\n","syntaxis   ```combinations_with_replacement(set, k)```\n","El conunto ```set``` se toman ```k``` elementos con reemplazo.\n","\n","$$C^R(n,k) = \\binom{n+k-1}{k} = \\frac{(n+k-1)!}{k!(n-1)!} $$\n","\n","Ejemplo con $n=4, $k=4$.\n","\n","$$C^R(4,4) = \\binom{7}{4} = \\frac{7!}{4!3!}= \\frac{7 \\times 6 \\times 5 \\times 4!}{3!} = 35 $$\n"],"metadata":{"id":"In_XM4TNkW1Q"}},{"cell_type":"code","source":["import itertools\n","from itertools import combinations_with_replacement\n","\n","digits = [1,2,3,4]\n","k=4\n","\n","products = combinations_with_replacement(digits, k)\n","listprod = list(products)\n","\n","print(f\"hay {len(listprod)} combinaiones con reemplazo\")\n","print(listprod)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"quwRpmO_l8Fh","executionInfo":{"status":"ok","timestamp":1684425771076,"user_tz":300,"elapsed":3,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"ec2ed79f-34cc-44cd-e0d7-3ad43adc0a84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hay 35 combinaiones con reemplazo\n","[(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 1, 4), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 2, 4), (1, 1, 3, 3), (1, 1, 3, 4), (1, 1, 4, 4), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 2, 4), (1, 2, 3, 3), (1, 2, 3, 4), (1, 2, 4, 4), (1, 3, 3, 3), (1, 3, 3, 4), (1, 3, 4, 4), (1, 4, 4, 4), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 2, 4), (2, 2, 3, 3), (2, 2, 3, 4), (2, 2, 4, 4), (2, 3, 3, 3), (2, 3, 3, 4), (2, 3, 4, 4), (2, 4, 4, 4), (3, 3, 3, 3), (3, 3, 3, 4), (3, 3, 4, 4), (3, 4, 4, 4), (4, 4, 4, 4)]\n"]}]},{"cell_type":"markdown","source":["## chain.   Combina (encadena) elementos diferentes en un solo objeto."],"metadata":{"id":"6Lk4nOU6mloE"}},{"cell_type":"code","source":["# ejemplo util para el proyeto final\n","digits = [i for i in range(10)]\n","letters = [chr(value) for value in range(97, 123)]\n","capitals = [a.upper() for a in letters]\n","#print(digits)\n","#print(letters)\n","#print(capitals)\n","\n","\n","# usamos el chain\n","combined = itertools.chain(digits, letters, capitals)\n","inList = list(combined)\n","print(inList)\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"94t9gHjqmYZk","executionInfo":{"status":"ok","timestamp":1684426894729,"user_tz":300,"elapsed":6,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"e7e560f5-6336-43fe-c484-24f820329475"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n"]}]},{"cell_type":"code","source":["import string\n","print(string.digits)"],"metadata":{"id":"4QQ2scK1nQNV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684426897000,"user_tz":300,"elapsed":194,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"6ac23737-a66b-4756-a1a5-2dae733d1e7b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0123456789\n"]}]},{"cell_type":"code","source":["print(string.ascii_letters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4zd89DjJoSUe","executionInfo":{"status":"ok","timestamp":1684426897579,"user_tz":300,"elapsed":5,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"f5d40964-67e4-4aee-f16e-00a55cdc28be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n"]}]},{"cell_type":"code","source":["print(string.digits + string.ascii_letters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7yd49qmnoXM3","executionInfo":{"status":"ok","timestamp":1684426897579,"user_tz":300,"elapsed":4,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"e03504eb-605a-4272-e314-3cbc4137b5da"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n"]}]},{"cell_type":"markdown","source":["## islice: \n","Tiene el mismo papel que tiene en NumPy, arange, linspace\n","Syntaxis: \n","```itertools.islice(iterable, start, stop, step)```\n","donde\n","```iterable``` es un iterador\n","```start``` el comienzo\n","```stop``` es el final\n","```step``` es el brinco \n"],"metadata":{"id":"ST9DYhjiodYt"}},{"cell_type":"code","source":["\n","result = itertools.islice(inList, 1, 15, 2)\n","print(list(result))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NuXLU-kQpN8J","executionInfo":{"status":"ok","timestamp":1684426899205,"user_tz":300,"elapsed":3,"user":{"displayName":"Herman Jaramillo","userId":"11327667299349438387"}},"outputId":"595e26f8-21a3-446b-efc4-0b738696a907"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 3, 5, 7, 9, 'b', 'd']\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ngpZYRfbpgqB"},"execution_count":null,"outputs":[]}]}